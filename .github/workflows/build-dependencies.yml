# .github/workflows/build-dependencies.yml

# 参考 https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml


name:  Third-party libs on multiple platforms
on:
  workflow_dispatch:
    inputs:
      library:
        description: 'Library to build'
        required: true
        type: choice
        options:
          - grpc
          - openssl
          - qt5
          - boost-uuid
          - sqlite3
          - yaml-cpp

jobs:
  build-and-package:
    runs-on: ${{ matrix.os }} # 指定运行环境，使用矩阵变量os
    strategy: # 定义构建策略
      fail-fast: false # 设置fail-fast为false，即使矩阵中一个任务失败，其他任务也会继续执行
      matrix:  # 定义矩阵策略，用于创建多个构建配置组合
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include: # 包含特定组合的列表（精确控制矩阵）
          # Windows + MSVC
          - os: windows-latest
            triplet: x64-windows-msvc-static-release
            c_compiler: cl
            cpp_compiler: cl
            generator: "Visual Studio 17 2022"
            arch: "x64"
          # Windows + MinGW
          - os: windows-latest
            triplet: x64-windows-mingw-static-release
            c_compiler: gcc
            cpp_compiler: g++
            generator: "MinGW Makefiles"
          # Linux + GCC
          - os: ubuntu-latest
            triplet: x64-linux-gcc-static-release
            c_compiler: gcc
            cpp_compiler: g++
            generator: "Unix Makefiles"
          # Linux + Clang
          - os: ubuntu-latest
            triplet: x64-linux-clang-static-release
            c_compiler: clang
            cpp_compiler: clang++
            generator: "Unix Makefiles"
        exclude: # 排除不需要的组合
          # 排除 Windows + Clang
          - os: windows-latest
            c_compiler: clang
          # 排除 Ubuntu + MSVC
          - os: ubuntu-latest
            c_compiler: cl
    
    # timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # 使用actions/checkout动作检出代码库

      # 设置可重用的字符串（如统一的以 / 为目录分隔符的工作目录、构建输出目录、Release 目录）
      - name: Set reusable strings
        id: strings     # 步骤ID，用于后续引用
        shell: bash     # GitHub Actions 的 Windows 环境预装了 Git Bash
        run: |          # 运行命令：将多个路径设置为环境变量
          workspace_dir="${{ github.workspace }}"       # 从GitHub上下文获取路径并标准化
          workspace_dir="${workspace_dir//\\//}"        # 替换所有反斜杠为正斜杠
          workspace_dir="${workspace_dir%/}"            # 移除路径末尾的斜杠（如果存在）
          
          # 构建路径并写入输出变量
          echo "workspace-dir=$workspace_dir" >> "$GITHUB_OUTPUT"
          echo "release-dir=$workspace_dir/release" >> "$GITHUB_OUTPUT"

          echo "custom-triplet-dir=$workspace_dir/triplets" >> "$GITHUB_OUTPUT"
          echo "cmake-generator=${{ matrix.generator }}" >> "$GITHUB_OUTPUT"

          echo "CC=${{ matrix.c_compiler }}" >> $GITHUB_OUTPUT
          echo "CXX=${{ matrix.cpp_compiler }}" >> $GITHUB_OUTPUT

          # 动态获取 vcpkg 安装路径和构建工具链文件完整路径
          which vcpkg && vcpkg --version || echo "vcpkg not found"
          echo "vcpkg_root=$(dirname $(which vcpkg))" >> "$GITHUB_OUTPUT"
          echo "vcpkg_toolchain=$vcpkg_root/../scripts/buildsystems/vcpkg.cmake" >> "$GITHUB_OUTPUT"

#       - name: Print compilers
#         shell: bash
#         run: |
#           echo "C Compiler: ${{ matrix.c_compiler }}"
#           echo "C++ Compiler: ${{ matrix.cpp_compiler }}"
#           which ${{ matrix.c_compiler }} && ${{ matrix.c_compiler }} --version || echo "${{ matrix.c_compiler }} not found"
#           which ${{ matrix.cpp_compiler }} && ${{ matrix.cpp_compiler }} --version || echo "${{ matrix.cpp_compiler }} not found"
          
      # vcpkg install library (or build)
      - name: Install common dependencies
        shell: bash
        run: >
          vcpkg install ${{ github.event.inputs.library }}
          --triplet ${{ matrix.triplet }}
          --overlay-triplets=${{ steps.strings.outputs.custom-triplet-dir }}
          --x-install-root=${{ steps.strings.outputs.release-dir }}
          --classic

#      - name: Configure CMake test project
#        shell: bash
#        run: |
#          # 对于 Visual Studio 额外指定架构，且不在生成阶段指定 -DCMAKE_BUILD_TYPE ，而是在 Build 阶段指定 --config 参数
#          if [[ "${{ matrix.generator }}" == "Visual Studio"* ]]; then
#            cmake -B ${{ steps.strings.outputs.release-dir }} \
#            -G "${{ matrix.generator }}" -A ${{ matrix.arch }} \
#            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
#            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
#            -S ${{ steps.strings.outputs.workspace-dir }} \
#            -DCMAKE_TOOLCHAIN_FILE=${{ steps.strings.outputs.vcpkg_toolchain }} \
#            -DVCPKG_TARGET_TRIPLET=${{ steps.strings.outputs.vcpkg-triplet }}

#          else
#            cmake -B ${{ steps.strings.outputs.release-dir }} \
#            -G "${{ matrix.generator }}" \
#            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
#            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
#            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
#            -S ${{ steps.strings.outputs.workspace-dir }} \
#            -DCMAKE_TOOLCHAIN_FILE=${{ steps.strings.outputs.vcpkg_toolchain }} \
#            -DVCPKG_TARGET_TRIPLET=${{ steps.strings.outputs.vcpkg-triplet }}
#          fi

#      - name: Build test project
#        shell: bash
#        run: |
#          # Visual Studio 需要 --config 参数，MinGW 和 Unix Makefiles 不需要 --config
#          if [[ "${{ matrix.generator }}" == "Visual Studio"* ]]; then
#            cmake --build ${{ steps.strings.outputs.release-dir }} --config ${{ matrix.build_type }} --parallel
#          else
#            cmake --build ${{ steps.strings.outputs.release-dir }} --parallel
#          fi

      - name: Get version
        id: setver
        shell: bash
        run: |

          # 从项目根目录的 CMakeLists.txt 获取版本号
          # version=$(vcpkg list ${{ github.event.inputs.library }} | grep '${{ github.event.inputs.library }}' | awk '{print $2}' | cut -d '#' -f 1)
          # 使用语义化版本+日期+构建号
          DATE=$(date +'%Y%m%d')
          echo "version=${version:-0.0.1}-$DATE.${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "short_os=$(echo $RUNNER_OS | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "arch=x86_64" >> $GITHUB_OUTPUT
          
          # 检测工具链
          if [ "$RUNNER_OS" == "Linux" ]; then
            # Linux 下根据矩阵变量判断工具链
            if [ "${{ matrix.c_compiler }}" == "clang" ]; then
              echo "toolchain=clang" >> $GITHUB_OUTPUT
            else
              echo "toolchain=gcc" >> $GITHUB_OUTPUT
            fi
          elif [ "$RUNNER_OS" == "Windows" ]; then
            # Windows 下根据矩阵变量判断工具链
            if [ "${{ matrix.c_compiler }}" == "cl" ]; then
              echo "toolchain=msvc" >> $GITHUB_OUTPUT
            else
              echo "toolchain=mingw" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Create release archives
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            tar -Jcvf ${{ steps.strings.outputs.workspace-dir }}/${{ github.event.inputs.library }}-v${{ steps.setver.outputs.version }}-${{ steps.setver.outputs.short_os }}-${{ steps.setver.outputs.arch }}-${{ steps.setver.outputs.toolchain }}.tar.xz -C ${{ steps.strings.outputs.release-dir }} .
          elif [ "$RUNNER_OS" == "Windows" ]; then
            7z a ${{ steps.strings.outputs.workspace-dir }}/${{ github.event.inputs.library }}-v${{ steps.setver.outputs.version }}-${{ steps.setver.outputs.short_os }}-${{ steps.setver.outputs.arch }}-${{ steps.setver.outputs.toolchain }}.7z -C ${{ steps.strings.outputs.release-dir }} .
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-pkgs-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ steps.setver.outputs.version }}
          path: |
            ${{ steps.strings.outputs.workspace-dir }}/*.tar.xz
            ${{ steps.strings.outputs.workspace-dir }}/*.7z

