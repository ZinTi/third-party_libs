# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: SQLite on multiple platforms

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          # Windows + MSVC
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            generator: "Visual Studio 17 2022"
            arch: "x64"
          # Windows + MinGW
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++
            generator: "MinGW Makefiles"
          # Linux + GCC
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            generator: "Unix Makefiles"
          # Linux + Clang
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            generator: "Unix Makefiles"
        exclude:
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Download sources
      shell: bash
      run: |
        wget https://sqlite.org/2025/sqlite-autoconf-3500400.tar.gz
        tar -xzf sqlite-autoconf-3500400.tar.gz
        tree sqlite-autoconf-3500400

    - name: Configure CMake
      shell: bash
      run: |
        # 对于 Visual Studio 额外指定架构，且不在生成阶段指定 -DCMAKE_BUILD_TYPE ，而是在 Build 阶段指定 --config 参数
        if [[ "${{ matrix.generator }}" == "Visual Studio"* ]]; then
          cmake -B ${{ steps.strings.outputs.build-output-dir }} \
          -G "${{ matrix.generator }}" -A ${{ matrix.arch }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -S ${{ steps.strings.outputs.workspace-dir }}
        else
          cmake -B ${{ steps.strings.outputs.build-output-dir }} \
          -G "${{ matrix.generator }}" \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -S ${{ steps.strings.outputs.workspace-dir }}
        fi

    - name: Build
      shell: bash
      run: |
        # Visual Studio 需要 --config 参数，MinGW 和 Unix Makefiles 不需要 --config
        if [[ "${{ matrix.generator }}" == "Visual Studio"* ]]; then
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel
        else
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --parallel
        fi


    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Set version
      id: setver
      shell: bash
      run: |

        # 从项目根目录的 CMakeLists.txt 获取版本号
        version=$(grep -m1 'project(.* VERSION' ${{ steps.strings.outputs.workspace-dir }}/CMakeLists.txt | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
        # 使用语义化版本+日期+构建号
        DATE=$(date +'%Y%m%d')
        echo "version=${version:-0.0.1}-$DATE.${{ github.run_number }}" >> $GITHUB_OUTPUT
        echo "short_os=$(echo $RUNNER_OS | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
        echo "arch=x86_64" >> $GITHUB_OUTPUT
        
        # 检测工具链
        if [ "$RUNNER_OS" == "Linux" ]; then
          # Linux 下根据矩阵变量判断工具链
          if [ "${{ matrix.c_compiler }}" == "clang" ]; then
            echo "toolchain=clang" >> $GITHUB_OUTPUT
          else
            echo "toolchain=gcc" >> $GITHUB_OUTPUT
          fi
        elif [ "$RUNNER_OS" == "Windows" ]; then
          # Windows 下根据矩阵变量判断工具链
          if [ "${{ matrix.c_compiler }}" == "cl" ]; then
            echo "toolchain=msvc" >> $GITHUB_OUTPUT
          else
            echo "toolchain=mingw" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Prepare release files
      shell: bash
      run: |

        # 创建组件目录
        mkdir -p ${{ steps.strings.outputs.release-dir }}/client/bin
        mkdir -p ${{ steps.strings.outputs.release-dir }}/server/{bin,data}

        # 复制可执行文件到对应组件
        if [ "${{ matrix.c_compiler }}" == "cl" ]; then
          cp ${{ steps.strings.outputs.build-output-dir }}/client_desktop/Release/hello.exe ${{ steps.strings.outputs.release-dir }}/client/bin/
          cp ${{ steps.strings.outputs.build-output-dir }}/service/Release/hellod.exe ${{ steps.strings.outputs.release-dir }}/server/bin/
          cp ${{ steps.strings.outputs.build-output-dir }}/control/Release/helloctl.exe ${{ steps.strings.outputs.release-dir }}/server/bin/
        else
          cp ${{ steps.strings.outputs.build-output-dir }}/client_desktop/hello ${{ steps.strings.outputs.release-dir }}/client/bin/
          cp ${{ steps.strings.outputs.build-output-dir }}/service/hellod ${{ steps.strings.outputs.release-dir }}/server/bin/
          cp ${{ steps.strings.outputs.build-output-dir }}/control/helloctl ${{ steps.strings.outputs.release-dir }}/server/bin/
        fi

        # 复制资源文件
        # cp -r assets ${{ steps.strings.outputs.release-dir }}/client/
        # cp -r assets ${{ steps.strings.outputs.release-dir }}/server/

    - name: Create release archives
      shell: bash
      run: |
        cd ${{ steps.strings.outputs.release-dir }}
        
        # 客户端打包
        if [ "$RUNNER_OS" == "Linux" ]; then
          tar -Jcvf hello-client-v${{ steps.setver.outputs.version }}-${{ steps.setver.outputs.short_os }}-${{ steps.setver.outputs.arch }}-${{ steps.setver.outputs.toolchain }}.tar.xz -C client .
        elif [ "$RUNNER_OS" == "Windows" ]; then
          7z a hello-client-v${{ steps.setver.outputs.version }}-${{ steps.setver.outputs.short_os }}-${{ steps.setver.outputs.arch }}-${{ steps.setver.outputs.toolchain }}.7z client/*
        fi
        
        # 服务端打包
        if [ "$RUNNER_OS" == "Linux" ]; then
          tar -Jcvf hello-server-v${{ steps.setver.outputs.version }}-${{ steps.setver.outputs.short_os }}-${{ steps.setver.outputs.arch }}-${{ steps.setver.outputs.toolchain }}.tar.xz -C server .
        elif [ "$RUNNER_OS" == "Windows" ]; then
          7z a hello-server-v${{ steps.setver.outputs.version }}-${{ steps.setver.outputs.short_os }}-${{ steps.setver.outputs.arch }}-${{ steps.setver.outputs.toolchain }}.7z server/*
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-pkgs-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ steps.setver.outputs.version }}
        path: |
          ${{ steps.strings.outputs.release-dir }}/*.tar.xz
          ${{ steps.strings.outputs.release-dir }}/*.7z
